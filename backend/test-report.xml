<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="163" failures="0" errors="0" time="0.732">
  <testsuite name="Authentication Routes" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.391" tests="4">
    <testcase classname="Authentication Routes POST /api/auth/login should handle successful login" name="Authentication Routes POST /api/auth/login should handle successful login" time="0.027">
    </testcase>
    <testcase classname="Authentication Routes POST /api/auth/login should handle login with invalid credentials" name="Authentication Routes POST /api/auth/login should handle login with invalid credentials" time="0.004">
    </testcase>
    <testcase classname="Authentication Routes POST /api/auth/login should handle missing credentials" name="Authentication Routes POST /api/auth/login should handle missing credentials" time="0.003">
    </testcase>
    <testcase classname="Authentication Routes POST /api/auth/login should handle server errors" name="Authentication Routes POST /api/auth/login should handle server errors" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="authMiddleware" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.411" tests="3">
    <testcase classname="authMiddleware debe rechazar si no se envía token" name="authMiddleware debe rechazar si no se envía token" time="0.01">
    </testcase>
    <testcase classname="authMiddleware debe rechazar si el token es inválido" name="authMiddleware debe rechazar si el token es inválido" time="0.001">
    </testcase>
    <testcase classname="authMiddleware debe permitir acceso si el token es válido" name="authMiddleware debe permitir acceso si el token es válido" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="User Routes" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.412" tests="6">
    <testcase classname="User Routes GET /api/usuarios should get all users successfully" name="User Routes GET /api/usuarios should get all users successfully" time="0.013">
    </testcase>
    <testcase classname="User Routes GET /api/usuarios should handle error when getting users" name="User Routes GET /api/usuarios should handle error when getting users" time="0.001">
    </testcase>
    <testcase classname="User Routes POST /api/usuarios should create user successfully" name="User Routes POST /api/usuarios should create user successfully" time="0.004">
    </testcase>
    <testcase classname="User Routes GET /api/usuarios/roles should get all roles successfully" name="User Routes GET /api/usuarios/roles should get all roles successfully" time="0.002">
    </testcase>
    <testcase classname="User Routes PUT /api/usuarios/:id should update user successfully" name="User Routes PUT /api/usuarios/:id should update user successfully" time="0.001">
    </testcase>
    <testcase classname="User Routes DELETE /api/usuarios/:id should delete user successfully" name="User Routes DELETE /api/usuarios/:id should delete user successfully" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Product Routes" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.41" tests="6">
    <testcase classname="Product Routes GET /api/productos should get all products successfully" name="Product Routes GET /api/productos should get all products successfully" time="0.011">
    </testcase>
    <testcase classname="Product Routes GET /api/productos should handle error when getting products" name="Product Routes GET /api/productos should handle error when getting products" time="0.002">
    </testcase>
    <testcase classname="Product Routes POST /api/productos should create product successfully" name="Product Routes POST /api/productos should create product successfully" time="0.004">
    </testcase>
    <testcase classname="Product Routes PUT /api/productos/:id should update product successfully" name="Product Routes PUT /api/productos/:id should update product successfully" time="0.002">
    </testcase>
    <testcase classname="Product Routes GET /api/productos/categorias should get all categories successfully" name="Product Routes GET /api/productos/categorias should get all categories successfully" time="0.002">
    </testcase>
    <testcase classname="Product Routes POST /api/productos/categorias should create category successfully" name="Product Routes POST /api/productos/categorias should create category successfully" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Order Routes" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.42" tests="8">
    <testcase classname="Order Routes GET /api/ordenes should get all orders successfully" name="Order Routes GET /api/ordenes should get all orders successfully" time="0.02">
    </testcase>
    <testcase classname="Order Routes GET /api/ordenes/with-details should get all orders with details successfully" name="Order Routes GET /api/ordenes/with-details should get all orders with details successfully" time="0.002">
    </testcase>
    <testcase classname="Order Routes GET /api/ordenes/estados should get available states successfully" name="Order Routes GET /api/ordenes/estados should get available states successfully" time="0.001">
    </testcase>
    <testcase classname="Order Routes GET /api/ordenes/:id should get order by id successfully" name="Order Routes GET /api/ordenes/:id should get order by id successfully" time="0.001">
    </testcase>
    <testcase classname="Order Routes POST /api/ordenes should create order successfully" name="Order Routes POST /api/ordenes should create order successfully" time="0.011">
    </testcase>
    <testcase classname="Order Routes PUT /api/ordenes/:id should update order successfully" name="Order Routes PUT /api/ordenes/:id should update order successfully" time="0.004">
    </testcase>
    <testcase classname="Order Routes PATCH /api/ordenes/:id/estado should update order state successfully" name="Order Routes PATCH /api/ordenes/:id/estado should update order state successfully" time="0.002">
    </testcase>
    <testcase classname="Order Routes DELETE /api/ordenes/:id should delete order successfully" name="Order Routes DELETE /api/ordenes/:id should delete order successfully" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="UsuarioModel" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.046" tests="12">
    <testcase classname="UsuarioModel getAll debería devolver todos los usuarios" name="UsuarioModel getAll debería devolver todos los usuarios" time="0.002">
    </testcase>
    <testcase classname="UsuarioModel getAll debería rechazar si hay error" name="UsuarioModel getAll debería rechazar si hay error" time="0.013">
    </testcase>
    <testcase classname="UsuarioModel getByEmail debería devolver el usuario encontrado por correo" name="UsuarioModel getByEmail debería devolver el usuario encontrado por correo" time="0.001">
    </testcase>
    <testcase classname="UsuarioModel create debería crear un usuario con contraseña hasheada" name="UsuarioModel create debería crear un usuario con contraseña hasheada" time="0.001">
    </testcase>
    <testcase classname="UsuarioModel create debería rechazar si prepare falla" name="UsuarioModel create debería rechazar si prepare falla" time="0.002">
    </testcase>
    <testcase classname="UsuarioModel update debería actualizar usuario con nueva contraseña" name="UsuarioModel update debería actualizar usuario con nueva contraseña" time="0.001">
    </testcase>
    <testcase classname="UsuarioModel update debería actualizar usuario sin cambiar contraseña" name="UsuarioModel update debería actualizar usuario sin cambiar contraseña" time="0">
    </testcase>
    <testcase classname="UsuarioModel update debería rechazar si prepare falla" name="UsuarioModel update debería rechazar si prepare falla" time="0.001">
    </testcase>
    <testcase classname="UsuarioModel delete debería eliminar usuario correctamente" name="UsuarioModel delete debería eliminar usuario correctamente" time="0">
    </testcase>
    <testcase classname="UsuarioModel delete debería rechazar si prepare falla" name="UsuarioModel delete debería rechazar si prepare falla" time="0">
    </testcase>
    <testcase classname="UsuarioModel getAllRoles debería devolver todas las roles" name="UsuarioModel getAllRoles debería devolver todas las roles" time="0">
    </testcase>
    <testcase classname="UsuarioModel getAllRoles debería rechazar si hay error" name="UsuarioModel getAllRoles debería rechazar si hay error" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Inventory Routes" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.465" tests="6">
    <testcase classname="Inventory Routes GET /api/inventario should get all inventory successfully" name="Inventory Routes GET /api/inventario should get all inventory successfully" time="0.037">
    </testcase>
    <testcase classname="Inventory Routes GET /api/inventario/with-details should get all inventory with details successfully" name="Inventory Routes GET /api/inventario/with-details should get all inventory with details successfully" time="0.002">
    </testcase>
    <testcase classname="Inventory Routes POST /api/inventario should create inventory successfully" name="Inventory Routes POST /api/inventario should create inventory successfully" time="0.011">
    </testcase>
    <testcase classname="Inventory Routes PUT /api/inventario/update-cantidad should update inventory quantity successfully" name="Inventory Routes PUT /api/inventario/update-cantidad should update inventory quantity successfully" time="0.003">
    </testcase>
    <testcase classname="Inventory Routes PUT /api/inventario/update-ubicacion should update inventory location successfully" name="Inventory Routes PUT /api/inventario/update-ubicacion should update inventory location successfully" time="0.008">
    </testcase>
    <testcase classname="Inventory Routes PUT /api/inventario/update-inventario-producto should update inventory and product successfully" name="Inventory Routes PUT /api/inventario/update-inventario-producto should update inventory and product successfully" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="ventasModel" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.474" tests="5">
    <testcase classname="ventasModel getAll debería devolver todas las ventas" name="ventasModel getAll debería devolver todas las ventas" time="0.003">
    </testcase>
    <testcase classname="ventasModel getAll debería rechazar si hay error al obtener ventas" name="ventasModel getAll debería rechazar si hay error al obtener ventas" time="0.005">
    </testcase>
    <testcase classname="ventasModel create debería crear una venta correctamente" name="ventasModel create debería crear una venta correctamente" time="0.002">
    </testcase>
    <testcase classname="ventasModel create debería fallar si prepare retorna error" name="ventasModel create debería fallar si prepare retorna error" time="0.001">
    </testcase>
    <testcase classname="ventasModel create debería fallar si exec retorna error" name="ventasModel create debería fallar si exec retorna error" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Sales Routes" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.068" tests="2">
    <testcase classname="Sales Routes GET /api/ventas should get all sales successfully" name="Sales Routes GET /api/ventas should get all sales successfully" time="0.004">
    </testcase>
    <testcase classname="Sales Routes POST /api/ventas should create sale successfully" name="Sales Routes POST /api/ventas should create sale successfully" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Authentication" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.079" tests="3">
    <testcase classname="Authentication Login should login successfully with valid credentials" name="Authentication Login should login successfully with valid credentials" time="0.001">
    </testcase>
    <testcase classname="Authentication Login should reject login with invalid email" name="Authentication Login should reject login with invalid email" time="0">
    </testcase>
    <testcase classname="Authentication Login should reject login with invalid password" name="Authentication Login should reject login with invalid password" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="OrdenesModel" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.028" tests="16">
    <testcase classname="OrdenesModel getAll debería devolver todas las órdenes" name="OrdenesModel getAll debería devolver todas las órdenes" time="0.001">
    </testcase>
    <testcase classname="OrdenesModel getAll debería rechazar en caso de error" name="OrdenesModel getAll debería rechazar en caso de error" time="0.003">
    </testcase>
    <testcase classname="OrdenesModel getById debería devolver la orden por id si existe" name="OrdenesModel getById debería devolver la orden por id si existe" time="0">
    </testcase>
    <testcase classname="OrdenesModel getById debería devolver null si no encuentra la orden" name="OrdenesModel getById debería devolver null si no encuentra la orden" time="0.001">
    </testcase>
    <testcase classname="OrdenesModel getById debería rechazar en caso de error en prepare" name="OrdenesModel getById debería rechazar en caso de error en prepare" time="0">
    </testcase>
    <testcase classname="OrdenesModel getById debería rechazar en caso de error en exec" name="OrdenesModel getById debería rechazar en caso de error en exec" time="0">
    </testcase>
    <testcase classname="OrdenesModel create debería insertar una nueva orden correctamente" name="OrdenesModel create debería insertar una nueva orden correctamente" time="0">
    </testcase>
    <testcase classname="OrdenesModel create debería rechazar en caso de error" name="OrdenesModel create debería rechazar en caso de error" time="0">
    </testcase>
    <testcase classname="OrdenesModel update debería actualizar la orden correctamente" name="OrdenesModel update debería actualizar la orden correctamente" time="0.001">
    </testcase>
    <testcase classname="OrdenesModel update debería rechazar en caso de error" name="OrdenesModel update debería rechazar en caso de error" time="0">
    </testcase>
    <testcase classname="OrdenesModel updateEstado debería actualizar el estado correctamente" name="OrdenesModel updateEstado debería actualizar el estado correctamente" time="0">
    </testcase>
    <testcase classname="OrdenesModel updateEstado debería rechazar en caso de error" name="OrdenesModel updateEstado debería rechazar en caso de error" time="0">
    </testcase>
    <testcase classname="OrdenesModel delete debería eliminar la orden correctamente" name="OrdenesModel delete debería eliminar la orden correctamente" time="0">
    </testcase>
    <testcase classname="OrdenesModel delete debería rechazar en caso de error" name="OrdenesModel delete debería rechazar en caso de error" time="0.001">
    </testcase>
    <testcase classname="OrdenesModel getAllEstadosDisponibles debería devolver todos los estados disponibles" name="OrdenesModel getAllEstadosDisponibles debería devolver todos los estados disponibles" time="0">
    </testcase>
    <testcase classname="OrdenesModel getAllEstadosDisponibles debería rechazar en caso de error" name="OrdenesModel getAllEstadosDisponibles debería rechazar en caso de error" time="0">
    </testcase>
  </testsuite>
  <testsuite name="User Management" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.079" tests="5">
    <testcase classname="User Management Get All Users should get all users successfully" name="User Management Get All Users should get all users successfully" time="0">
    </testcase>
    <testcase classname="User Management Create User should create a user successfully" name="User Management Create User should create a user successfully" time="0">
    </testcase>
    <testcase classname="User Management Update User should update a user successfully" name="User Management Update User should update a user successfully" time="0.001">
    </testcase>
    <testcase classname="User Management Delete User should delete a user successfully" name="User Management Delete User should delete a user successfully" time="0">
    </testcase>
    <testcase classname="User Management Get Roles should get all roles successfully" name="User Management Get Roles should get all roles successfully" time="0">
    </testcase>
  </testsuite>
  <testsuite name="AI Order Suggestions Routes" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.062" tests="2">
    <testcase classname="AI Order Suggestions Routes GET /api/ordenes-sugeridas should get all suggested orders successfully" name="AI Order Suggestions Routes GET /api/ordenes-sugeridas should get all suggested orders successfully" time="0.002">
    </testcase>
    <testcase classname="AI Order Suggestions Routes POST /api/ordenes-sugeridas should create suggested order successfully" name="AI Order Suggestions Routes POST /api/ordenes-sugeridas should create suggested order successfully" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="inventarioModel" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.047" tests="7">
    <testcase classname="inventarioModel getAll debería devolver el inventario completo" name="inventarioModel getAll debería devolver el inventario completo" time="0.001">
    </testcase>
    <testcase classname="inventarioModel getAll debería lanzar error si falla la DB" name="inventarioModel getAll debería lanzar error si falla la DB" time="0.009">
    </testcase>
    <testcase classname="inventarioModel create debería crear un nuevo registro en el inventario" name="inventarioModel create debería crear un nuevo registro en el inventario" time="0.001">
    </testcase>
    <testcase classname="inventarioModel create debería lanzar error si falla prepare" name="inventarioModel create debería lanzar error si falla prepare" time="0">
    </testcase>
    <testcase classname="inventarioModel updateCantidad debería ejecutar el procedimiento almacenado con los valores correctos" name="inventarioModel updateCantidad debería ejecutar el procedimiento almacenado con los valores correctos" time="0">
    </testcase>
    <testcase classname="inventarioModel updateUbicacion debería actualizar la ubicación" name="inventarioModel updateUbicacion debería actualizar la ubicación" time="0">
    </testcase>
    <testcase classname="inventarioModel updateInventoryAndProductDetails debería llamar al procedimiento para actualizar inventario y producto" name="inventarioModel updateInventoryAndProductDetails debería llamar al procedimiento para actualizar inventario y producto" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="productosModel" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.036" tests="13">
    <testcase classname="productosModel getAll debería devolver todos los productos" name="productosModel getAll debería devolver todos los productos" time="0.002">
    </testcase>
    <testcase classname="productosModel getAll debería rechazar en caso de error" name="productosModel getAll debería rechazar en caso de error" time="0.006">
    </testcase>
    <testcase classname="productosModel create debería insertar un nuevo producto correctamente" name="productosModel create debería insertar un nuevo producto correctamente" time="0">
    </testcase>
    <testcase classname="productosModel create debería rechazar en caso de error en prepare" name="productosModel create debería rechazar en caso de error en prepare" time="0.001">
    </testcase>
    <testcase classname="productosModel create debería rechazar en caso de error en exec" name="productosModel create debería rechazar en caso de error en exec" time="0">
    </testcase>
    <testcase classname="productosModel updateById debería actualizar un producto por id correctamente" name="productosModel updateById debería actualizar un producto por id correctamente" time="0">
    </testcase>
    <testcase classname="productosModel updateById debería rechazar en caso de error en prepare" name="productosModel updateById debería rechazar en caso de error en prepare" time="0.001">
    </testcase>
    <testcase classname="productosModel updateById debería rechazar en caso de error en exec" name="productosModel updateById debería rechazar en caso de error en exec" time="0">
    </testcase>
    <testcase classname="productosModel getAllCategorias debería devolver todas las categorías" name="productosModel getAllCategorias debería devolver todas las categorías" time="0">
    </testcase>
    <testcase classname="productosModel getAllCategorias debería rechazar en caso de error" name="productosModel getAllCategorias debería rechazar en caso de error" time="0">
    </testcase>
    <testcase classname="productosModel createCategory debería insertar una nueva categoría correctamente" name="productosModel createCategory debería insertar una nueva categoría correctamente" time="0">
    </testcase>
    <testcase classname="productosModel createCategory debería rechazar en caso de error en prepare" name="productosModel createCategory debería rechazar en caso de error en prepare" time="0.001">
    </testcase>
    <testcase classname="productosModel createCategory debería rechazar en caso de error en exec" name="productosModel createCategory debería rechazar en caso de error en exec" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Inventory Management" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:03" time="0.026" tests="9">
    <testcase classname="Inventory Management Get All Inventory should get all inventory successfully" name="Inventory Management Get All Inventory should get all inventory successfully" time="0">
    </testcase>
    <testcase classname="Inventory Management Get All Inventory With Details should get all inventory with details successfully" name="Inventory Management Get All Inventory With Details should get all inventory with details successfully" time="0.001">
    </testcase>
    <testcase classname="Inventory Management Create Inventory should create inventory successfully" name="Inventory Management Create Inventory should create inventory successfully" time="0">
    </testcase>
    <testcase classname="Inventory Management Update Quantity should update quantity successfully" name="Inventory Management Update Quantity should update quantity successfully" time="0">
    </testcase>
    <testcase classname="Inventory Management Update Quantity should reject invalid quantity" name="Inventory Management Update Quantity should reject invalid quantity" time="0">
    </testcase>
    <testcase classname="Inventory Management Update Location should update location successfully" name="Inventory Management Update Location should update location successfully" time="0">
    </testcase>
    <testcase classname="Inventory Management Update Location should reject invalid location" name="Inventory Management Update Location should reject invalid location" time="0.001">
    </testcase>
    <testcase classname="Inventory Management Update Inventory and Product should update inventory and product successfully" name="Inventory Management Update Inventory and Product should update inventory and product successfully" time="0">
    </testcase>
    <testcase classname="Inventory Management Update Inventory and Product should reject missing required fields" name="Inventory Management Update Inventory and Product should reject missing required fields" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ordenesSugeridasIaModel" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:03" time="0.039" tests="5">
    <testcase classname="ordenesSugeridasIaModel getAll debería devolver todas las órdenes sugeridas por IA" name="ordenesSugeridasIaModel getAll debería devolver todas las órdenes sugeridas por IA" time="0">
    </testcase>
    <testcase classname="ordenesSugeridasIaModel getAll debería rechazar en caso de error" name="ordenesSugeridasIaModel getAll debería rechazar en caso de error" time="0.005">
    </testcase>
    <testcase classname="ordenesSugeridasIaModel create debería insertar una nueva orden sugerida por IA correctamente" name="ordenesSugeridasIaModel create debería insertar una nueva orden sugerida por IA correctamente" time="0.001">
    </testcase>
    <testcase classname="ordenesSugeridasIaModel create debería rechazar en caso de error en prepare" name="ordenesSugeridasIaModel create debería rechazar en caso de error en prepare" time="0">
    </testcase>
    <testcase classname="ordenesSugeridasIaModel create debería rechazar en caso de error en exec" name="ordenesSugeridasIaModel create debería rechazar en caso de error en exec" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Supplier Management" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:03" time="0.036" tests="13">
    <testcase classname="Supplier Management Get All Suppliers should get all suppliers successfully" name="Supplier Management Get All Suppliers should get all suppliers successfully" time="0">
    </testcase>
    <testcase classname="Supplier Management Get All Suppliers should handle error when getting suppliers" name="Supplier Management Get All Suppliers should handle error when getting suppliers" time="0.001">
    </testcase>
    <testcase classname="Supplier Management Get Supplier By ID should get supplier by id successfully" name="Supplier Management Get Supplier By ID should get supplier by id successfully" time="0.001">
    </testcase>
    <testcase classname="Supplier Management Get Supplier By ID should return 404 when supplier not found" name="Supplier Management Get Supplier By ID should return 404 when supplier not found" time="0">
    </testcase>
    <testcase classname="Supplier Management Get Supplier By ID should handle error when getting supplier" name="Supplier Management Get Supplier By ID should handle error when getting supplier" time="0.001">
    </testcase>
    <testcase classname="Supplier Management Create Supplier should create supplier successfully" name="Supplier Management Create Supplier should create supplier successfully" time="0.001">
    </testcase>
    <testcase classname="Supplier Management Create Supplier should handle error when creating supplier" name="Supplier Management Create Supplier should handle error when creating supplier" time="0">
    </testcase>
    <testcase classname="Supplier Management Update Supplier should update supplier successfully" name="Supplier Management Update Supplier should update supplier successfully" time="0.001">
    </testcase>
    <testcase classname="Supplier Management Update Supplier should return 404 when supplier not found" name="Supplier Management Update Supplier should return 404 when supplier not found" time="0">
    </testcase>
    <testcase classname="Supplier Management Update Supplier should handle error when updating supplier" name="Supplier Management Update Supplier should handle error when updating supplier" time="0">
    </testcase>
    <testcase classname="Supplier Management Delete Supplier should delete supplier successfully" name="Supplier Management Delete Supplier should delete supplier successfully" time="0">
    </testcase>
    <testcase classname="Supplier Management Delete Supplier should return 404 when supplier not found" name="Supplier Management Delete Supplier should return 404 when supplier not found" time="0">
    </testcase>
    <testcase classname="Supplier Management Delete Supplier should handle error when deleting supplier" name="Supplier Management Delete Supplier should handle error when deleting supplier" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Order Management" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:03" time="0.046" tests="12">
    <testcase classname="Order Management Get All Orders should get all orders successfully" name="Order Management Get All Orders should get all orders successfully" time="0.001">
    </testcase>
    <testcase classname="Order Management Get Orders With Details should get all orders with details successfully" name="Order Management Get Orders With Details should get all orders with details successfully" time="0.001">
    </testcase>
    <testcase classname="Order Management Get Order By ID should get order by id successfully" name="Order Management Get Order By ID should get order by id successfully" time="0">
    </testcase>
    <testcase classname="Order Management Get Order By ID should return 404 when order not found" name="Order Management Get Order By ID should return 404 when order not found" time="0.002">
    </testcase>
    <testcase classname="Order Management Create Order should create order successfully" name="Order Management Create Order should create order successfully" time="0">
    </testcase>
    <testcase classname="Order Management Update Order should update order successfully" name="Order Management Update Order should update order successfully" time="0.001">
    </testcase>
    <testcase classname="Order Management Update Order should return 404 when order not found" name="Order Management Update Order should return 404 when order not found" time="0.001">
    </testcase>
    <testcase classname="Order Management Update Order Status should update order status successfully" name="Order Management Update Order Status should update order status successfully" time="0">
    </testcase>
    <testcase classname="Order Management Update Order Status should return 404 when order not found" name="Order Management Update Order Status should return 404 when order not found" time="0.001">
    </testcase>
    <testcase classname="Order Management Delete Order should delete order successfully" name="Order Management Delete Order should delete order successfully" time="0">
    </testcase>
    <testcase classname="Order Management Delete Order should return 404 when order not found" name="Order Management Delete Order should return 404 when order not found" time="0.001">
    </testcase>
    <testcase classname="Order Management Get Available Statuses should get all available statuses successfully" name="Order Management Get Available Statuses should get all available statuses successfully" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Sales Management" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:03" time="0.023" tests="4">
    <testcase classname="Sales Management Get All Sales should get all sales successfully" name="Sales Management Get All Sales should get all sales successfully" time="0">
    </testcase>
    <testcase classname="Sales Management Get All Sales should handle error when getting sales" name="Sales Management Get All Sales should handle error when getting sales" time="0">
    </testcase>
    <testcase classname="Sales Management Create Sale should create sale successfully" name="Sales Management Create Sale should create sale successfully" time="0.001">
    </testcase>
    <testcase classname="Sales Management Create Sale should handle error when creating sale" name="Sales Management Create Sale should handle error when creating sale" time="0">
    </testcase>
  </testsuite>
  <testsuite name="AI Order Suggestions Management" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:03" time="0.032" tests="4">
    <testcase classname="AI Order Suggestions Management Get All Suggested Orders should get all suggested orders successfully" name="AI Order Suggestions Management Get All Suggested Orders should get all suggested orders successfully" time="0.001">
    </testcase>
    <testcase classname="AI Order Suggestions Management Get All Suggested Orders should handle error when getting suggested orders" name="AI Order Suggestions Management Get All Suggested Orders should handle error when getting suggested orders" time="0">
    </testcase>
    <testcase classname="AI Order Suggestions Management Create Suggested Order should create suggested order successfully" name="AI Order Suggestions Management Create Suggested Order should create suggested order successfully" time="0">
    </testcase>
    <testcase classname="AI Order Suggestions Management Create Suggested Order should handle error when creating suggested order" name="AI Order Suggestions Management Create Suggested Order should handle error when creating suggested order" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ProveedorModel" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:03" time="0.019" tests="6">
    <testcase classname="ProveedorModel getAll debería llamar execQuery con la consulta correcta y devolver resultados" name="ProveedorModel getAll debería llamar execQuery con la consulta correcta y devolver resultados" time="0.001">
    </testcase>
    <testcase classname="ProveedorModel getById debería devolver el proveedor si existe" name="ProveedorModel getById debería devolver el proveedor si existe" time="0">
    </testcase>
    <testcase classname="ProveedorModel getById debería devolver null si no hay resultados" name="ProveedorModel getById debería devolver null si no hay resultados" time="0">
    </testcase>
    <testcase classname="ProveedorModel create debería insertar un nuevo proveedor y devolver el resultado" name="ProveedorModel create debería insertar un nuevo proveedor y devolver el resultado" time="0">
    </testcase>
    <testcase classname="ProveedorModel update debería actualizar un proveedor y devolver true" name="ProveedorModel update debería actualizar un proveedor y devolver true" time="0.001">
    </testcase>
    <testcase classname="ProveedorModel delete debería eliminar un proveedor y devolver true" name="ProveedorModel delete debería eliminar un proveedor y devolver true" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Database Connection" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:03" time="0.022" tests="2">
    <testcase classname="Database Connection should connect successfully with valid credentials" name="Database Connection should connect successfully with valid credentials" time="0.004">
    </testcase>
    <testcase classname="Database Connection should handle connection error" name="Database Connection should handle connection error" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Product Management" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:03" time="0.035" tests="5">
    <testcase classname="Product Management Get All Products should get all products successfully" name="Product Management Get All Products should get all products successfully" time="0">
    </testcase>
    <testcase classname="Product Management Create Product should create a product successfully" name="Product Management Create Product should create a product successfully" time="0.001">
    </testcase>
    <testcase classname="Product Management Update Product should update a product successfully" name="Product Management Update Product should update a product successfully" time="0">
    </testcase>
    <testcase classname="Product Management Get Categories should get all categories successfully" name="Product Management Get Categories should get all categories successfully" time="0">
    </testcase>
    <testcase classname="Product Management Create Category should create a category successfully" name="Product Management Create Category should create a category successfully" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Supplier Routes" errors="0" failures="0" skipped="0" timestamp="2025-06-06T17:59:02" time="0.132" tests="5">
    <testcase classname="Supplier Routes GET /api/proveedores should get all suppliers successfully" name="Supplier Routes GET /api/proveedores should get all suppliers successfully" time="0.013">
    </testcase>
    <testcase classname="Supplier Routes GET /api/proveedores/:id should get supplier by id successfully" name="Supplier Routes GET /api/proveedores/:id should get supplier by id successfully" time="0.002">
    </testcase>
    <testcase classname="Supplier Routes POST /api/proveedores should create supplier successfully" name="Supplier Routes POST /api/proveedores should create supplier successfully" time="0.006">
    </testcase>
    <testcase classname="Supplier Routes PUT /api/proveedores/:id should update supplier successfully" name="Supplier Routes PUT /api/proveedores/:id should update supplier successfully" time="0.001">
    </testcase>
    <testcase classname="Supplier Routes DELETE /api/proveedores/:id should delete supplier successfully" name="Supplier Routes DELETE /api/proveedores/:id should delete supplier successfully" time="0.001">
    </testcase>
  </testsuite>
</testsuites>